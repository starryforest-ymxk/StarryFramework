using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using UnityEngine.Events;

namespace StarryFramework
{
    [DisallowMultipleComponent]
    public class SaveComponent: BaseComponent
    {
        private SaveManager _manager;
        private SaveManager Manager => _manager ??= FrameworkManager.GetManager<SaveManager>();

        [SerializeField] private SaveSettings settings;

        private UnityAction onLeaveMainGame;


        public int DefaultDataIndex => Manager.DefaultDataIndex;
        public int CurrentLoadedDataIndex => Manager.CurrentLoadedDataIndex;
        public float AutoSaveDataInterval => Manager.AutoSaveDataInterval;
        public float LastAutoSaveTime => Manager.LastAutoSaveTime;
        public bool AutoSave => Manager.AutoSave;
        public string AutoSaveInfo => Manager.AutoSaveInfo;
        public List<string> SaveInfoList => Manager.SaveInfoList;
        public Dictionary<int, PlayerDataInfo> DataInfoDic => Manager.infoDic;

        public GameSettings GameSettings
        {
            get
            {
                if (Manager.GameSettings == null)
                {
                    FrameworkManager.Debugger.LogError("游戏设置数据错误/游戏设置数据尚未加载");
                    return null;
                }

                return Manager.GameSettings;
            }
        }
        public PlayerData PlayerData
        { 
            get
            {
                if(Manager.PlayerData == null)
                {
                    FrameworkManager.Debugger.LogError("存档数据尚未加载");
                    return null;
                }

                return Manager.PlayerData;
            } 
        }
        
#if UNITY_EDITOR
        private void OnValidate()
        {
            if(EditorApplication.isPlaying && _manager != null )
                (_manager as IManager).SetSettings(settings);
        }
#endif


        protected override void Awake()
        {
            base.Awake();
            _manager ??= FrameworkManager.GetManager<SaveManager>();
            (_manager as IManager).SetSettings(settings);
            
            onLeaveMainGame = () => { UnloadData();};
        }
        private void Start()
        {
            FrameworkManager.EventManager.AddEventListener(FrameworkEvent.OnLeaveMainGame, onLeaveMainGame);
        }
        internal override void Shutdown()
        {
            FrameworkManager.EventManager?.RemoveEventListener(FrameworkEvent.OnLeaveMainGame, onLeaveMainGame);
        }


        #region 设置存档注释

        /// <summary>
        /// 设置存档注释为i号注释
        /// 存档注释为与存档一同保存的信息
        /// </summary>
        /// <param Name="i"></param>
        public void SetSaveInfo(int i)
        {
            Manager.SetSaveInfo(i);
        }

        /// <summary>
        /// 设置存档注释为i号注释
        /// 存档注释为与存档一同保存的信息
        /// </summary>
        /// <param Name="info"></param>
        public void SetSaveInfo(string info)
        {
            Manager.SetSaveInfo(info);
        }

        #endregion

        #region 存档操作
        /// <summary>
        /// 创建新存档
        /// </summary>
        /// <param Name="isNewGame">是否是新游戏</param>
        /// <param Name="note">存档信息</param>
        public void CreateNewData(bool isNewGame, string note = "")
        {
            Manager.CreateNewData(isNewGame, note);
        }
        /// <summary>
        /// 储存存档,快速存档和自动存档
        /// </summary>
        public void SaveData(string note = "")
        {
            Manager.SaveData(note);
        }
        /// <summary>
        /// 储存存档到编号i，手动选择
        /// </summary>
        /// <param Name="i">储存存档的编号</param>
        public void SaveData(int i, string note = "")
        {
            Manager.SaveData(i, note);

        }
        /// <summary>
        /// 自动读取存档
        /// </summary>
        public bool LoadData()
        {
            return Manager.LoadData();
        }
        /// <summary>
        /// 读取存档信息
        /// </summary>
        public PlayerDataInfo LoadDataInfo()
        {
            return Manager.LoadDataInfo();
        }
        /// <summary>
        /// 手动读取编号为i的存档
        /// </summary>
        /// <param Name="i">存档编号</param>
        public bool LoadData(int i)
        {
            return Manager.LoadData(i);
        }
        /// <summary>
        /// 获取编号为i的存档信息
        /// </summary>
        /// <returns>编号为i的存档信息</returns>
        public PlayerDataInfo LoadDataInfo(int i)
        {
            return Manager.LoadDataInfo(i);
        }
        /// <summary>
        /// 卸载当前已加载的存档
        /// </summary>
        /// <returns></returns>
        public bool UnloadData()
        {
            return Manager.UnloadData();
        }
        /// <summary>
        /// 删除存档
        /// </summary>
        /// <param Name="i">删除的存档编号</param>
        public bool DeleteData(int i)
        {
            return Manager.DeleteData(i);
        }
        /// <summary>
        /// 获取全部存档信息
        /// </summary>
        /// <returns></returns>
        public List<PlayerDataInfo> GetDataInfos()
        {
            return Manager.GetDataInfos();
        }


        #endregion

        #region 自动存档计时器启停

        /// <summary>
        /// 启动自动存档
        /// </summary>
        public void StartAutoSaveTimer()
        {
            Manager.StartAutoSaveTimer();
        }

        /// <summary>
        /// 关闭自动存档
        /// </summary>
        public void StopAutoSaveTimer()
        {
            Manager.StopAutoSaveTimer();
        }

        #endregion

    }
}
